package com.playlab.bussolaagil.componentsimport android.content.res.Configuration.UI_MODE_NIGHT_YESimport androidx.compose.foundation.borderimport androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.CircleShapeimport androidx.compose.material.MaterialThemeimport androidx.compose.material.Surfaceimport androidx.compose.material.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.rotateimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.res.stringResourceimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.Dpimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.constraintlayout.compose.ConstraintLayoutimport com.playlab.bussolaagil.Rimport com.playlab.bussolaagil.ui.theme.BussolaAgilThemeimport com.playlab.bussolaagil.ui.theme.RedPepper@Composablefun StyledCompass(    modifier: Modifier = Modifier,    size: Dp = 300.dp,    color: Color = MaterialTheme.colors.onBackground,    degrees: Int = 360,) {    BaseCompass(degrees = degrees){ rotationAngle ->        Box(            modifier = Modifier.border(                width = 6.dp, shape = CircleShape, color = color            ),            contentAlignment = Alignment.Center        ){            Text(                text = "${degrees}Â°",                color = MaterialTheme.colors.onBackground,                fontSize = (size.value * .2f).toInt().sp,                style = MaterialTheme.typography.h1,            )            ConstraintLayout(                Modifier                    .size(size)                    .rotate(rotationAngle)            ) {                val ( west, north, east, south) = createRefs()                //WEST                Text(                    modifier = Modifier.constrainAs(west){                        top.linkTo(parent.top, 8.dp)                        start.linkTo(parent.start, 16.dp)                        end.linkTo(parent.end, 16.dp)                    },                    text = stringResource(id = R.string.west),                    color = MaterialTheme.colors.onSurface,                    style = MaterialTheme.typography.subtitle1                )                //EAST                Text(                    modifier = Modifier.constrainAs(east){                        start.linkTo(parent.start, 16.dp)                        end.linkTo(parent.end, 16.dp)                        bottom.linkTo(parent.bottom, 8.dp)                    }.rotate(180f),                    text = stringResource(id = R.string.east),                    color = MaterialTheme.colors.onBackground,                    style = MaterialTheme.typography.subtitle1                )                //SOUTH                Text(                    modifier = Modifier                        .constrainAs(south) {                            top.linkTo(parent.top, 16.dp)                            start.linkTo(parent.start, 12.dp)                            bottom.linkTo(parent.bottom, 16.dp)                        }                        .rotate(90f),                    text = stringResource(id = R.string.south),                    color = MaterialTheme.colors.onBackground,                    style = MaterialTheme.typography.subtitle1                )                //NORTH                Text(                    modifier = Modifier                        .constrainAs(north) {                            top.linkTo(parent.top, 16.dp)                            end.linkTo(parent.end, 12.dp)                            bottom.linkTo(parent.bottom, 16.dp)                        }                        .rotate(90f),                    text = stringResource(id = R.string.north),                    color = RedPepper,                    style = MaterialTheme.typography.subtitle1,                    fontWeight = FontWeight.SemiBold                )            }        }    }}@Composable@Preview(showBackground = true, showSystemUi = true)fun CompassAnimationStyledPreview() {    BussolaAgilTheme() {        Surface() {            Column(                Modifier.fillMaxSize(),                horizontalAlignment = Alignment.CenterHorizontally,                verticalArrangement = Arrangement.Center            ) {                StyledCompass(degrees = 90)            }        }    }}@Composable@Preview(showBackground = true, uiMode = UI_MODE_NIGHT_YES, showSystemUi = true)fun CompassAnimationStyledDarkPreview() {    BussolaAgilTheme() {        Surface() {            Column(                Modifier.fillMaxSize(),                horizontalAlignment = Alignment.CenterHorizontally,                verticalArrangement = Arrangement.Center            ) {                StyledCompass(degrees = 0)            }        }    }}